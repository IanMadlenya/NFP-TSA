knitr::opts_chunk$set(echo = TRUE)
library(astsa)
setwd("~/Dropbox/Berkeley/stat153/NFP-TSA/")
PAYEMS[853][2]
PAYEMS <- read.csv(file = "PAYEMS.csv", header = TRUE, sep = ",")
PAYEMS[853][2]
PAYEMS[853,][2]
PAYEMS[853,][2]
PAYEMS[853:940,][2]
PAYEMS[853:939,][2]
PAYEMS[939:951,][2]
PAYEMS[941:951,][2]
PAYEMS[853:939,][2]
PAYEMS[941:951,][2]
PAYEMS[940:951,][2]
PAYEMS[853:939,][2]
PAYEMS[940:951,][2]
PAYEMS[853:939,][2]
nfp_sa_ts_training <- ts(PAYEMS[853:939,][2])
nfp_sa_ts_testing <- ts(PAYEMS[940:951,][2])
nfp_sa_training_ts <- ts(PAYEMS[853:939,][2])
nfp_sa_testing_ts <- ts(PAYEMS[940:951,][2])
nfp_nsa_training_ts <- ts(PAYNSA[853:939,][2])
nfp_nsa_testing_ts <- ts(PAYNSA[940:951,][2])
PAYNSA <- read.csv(file = "PAYNSA.csv", header = TRUE, sep = ",")
nfp_sa_ts <- ts(PAYEMS[2])
nfp_nsa_ts <- ts(PAYNSA[2])
nfp_sa_training_ts <- ts(PAYEMS[853:939,][2])
nfp_sa_testing_ts <- ts(PAYEMS[940:951,][2])
nfp_nsa_training_ts <- ts(PAYNSA[853:939,][2])
nfp_nsa_testing_ts <- ts(PAYNSA[940:951,][2])
PAYEMS <- read.csv(file = "PAYEMS.csv", header = TRUE, sep = ",")
PAYNSA <- read.csv(file = "PAYNSA.csv", header = TRUE, sep = ",")
nfp_sa_ts <- ts(PAYEMS[2])
nfp_nsa_ts <- ts(PAYNSA[2])
nfp_sa_training_ts <- ts(PAYEMS[853:939,][2])
nfp_sa_testing_ts <- ts(PAYEMS[940:951,][2])
nfp_nsa_training_ts <- ts(PAYNSA[853:939,][2])
nfp_nsa_testing_ts <- ts(PAYNSA[940:951,][2])
library(DataComputing)
library(DataComputing)
library(astsa)
library(DataComputing)
library(astsa)
mse <- function(ts1, ts2) {
sum_squares = 0
for (i in 1:length(ts1)) {
diff <- ts1[i] - ts2[i]
sum_squares = sum_squares + diff^2
}
sum_squares/length(ts1)
}
mse(nfp_sa_training_ts, nfp_sa_training_ts)
mse <- function(ts1, ts2) {
sum_squares = 0
for (i in 1:length(ts1)) {
diff <- ts1[i] - ts2[i]
sum_squares = sum_squares + diff^2
}
sum_squares/length(ts1)
}
nobs <- length(nfp_nsa_training_ts)
fit <- arima(nfp_nsa_training_ts, order=c(0, 0, 0), xreg=1:nobs)
n_predictions <- length(nfp_nsa_testing_ts)
forecast <- predict(fit, n_predictions, newxreg=(nobs+1):(nobs+n_predictions))
par(mfrow=c(1,1))
ts.plot(nfp_nsa_training_ts, forecast$pred)
par(mfrow=c(2,1))
ts.plot(nfp_nsa_training_ts, forecast$pred)
forecast$pred
nfp_nsa_testing_ts
forecast$pred
nfp_nsa_testing_ts
forecast$pred
mse <- function(ts1, ts2) {
sum_squares = 0
for (i in 1:length(ts1)) {
diff <- ts1[i] - ts2[i]
sum_squares = sum_squares + diff^2
}
sum_squares/length(ts1)
}
mse(forecast$pred, nfp_nsa_testing_ts)
mse <- function(ts1, ts2) {
sum_squares = 0
for (i in 1:length(ts1)) {
diff <- ts1[i] - ts2[i]
sum_squares = sum_squares + diff^2
}
sum_squares
# sum_squares/length(ts1)
}
mse(forecast$pred, nfp_nsa_testing_ts)
mse <- function(ts1, ts2) {
sum_squares = 0
for (i in 1:length(ts1)) {
diff <- ts1[i] - ts2[i]
sum_squares = sum_squares + diff^2
}
sum_squares/length(ts1)
}
mse(forecast$pred, nfp_nsa_testing_ts)
ts.plot(nfp_nsa_training_ts, nfp_nsa_testing_ts)
par(mfrow=c(2,1))
ts.plot(nfp_nsa_training_ts, forecast$pred)
ts.plot(nfp_nsa_training_ts, nfp_nsa_testing_ts)
ts.plot(nfp_nsa_training_ts, forecast$pred)
mse(forecast$pred, nfp_nsa_testing_ts)
n_pred <- length(nfp_nsa_testing_ts)
forecast <- predict(fit, n_predictions, newxreg=(nobs+1):(nobs+n_pred))
par(mfrow=c(2,1))
ts.plot(nfp_nsa_training_ts, forecast$pred)
fit <- arima(nfp_nsa_training_ts, order=c(0, 1, 0), xreg=1:nobs)
n_pred <- length(nfp_nsa_testing_ts)
forecast <- predict(fit, n_predictions, newxreg=(nobs+1):(nobs+n_pred))
par(mfrow=c(2,1))
ts.plot(nfp_nsa_training_ts, forecast$pred)
fit <- arima(nfp_nsa_training_ts, order=c(0, 0, 0), xreg=1:nobs)
n_pred <- length(nfp_nsa_testing_ts)
forecast <- predict(fit, n_predictions, newxreg=(nobs+1):(nobs+n_pred))
par(mfrow=c(2,1))
ts.plot(nfp_nsa_training_ts, forecast$pred)
sarima.for(nfp_nsa_training_ts, n_pred , 0, 0, 0)
sarima.for(nfp_nsa_training_ts, n_pred , 1, 1, 1)
sarima.for(nfp_nsa_training_ts, n_pred , 0, 1, 0)
sarima.for(nfp_nsa_training_ts, n_pred , 0, 1, 0)
sfit <- sarima.for(nfp_nsa_training_ts, n_pred , 0, 1, 0)
sfit
sfit <- sarima.for(nfp_nsa_training_ts, n_pred , 0, 1, 0)
mse(sfit, nfp_nsa_testing_ts)
sfit
mse(sfit$pred, nfp_nsa_testing_ts)
fit <- arima(nfp_nsa_training_ts, order=c(0, 1, 0), xreg=1:nobs)
n_pred <- length(nfp_nsa_testing_ts)
forecast <- predict(fit, n_predictions, newxreg=(nobs+1):(nobs+n_pred))
par(mfrow=c(2,1))
ts.plot(nfp_nsa_training_ts, forecast$pred)
mse(forecast$pred, nfp_nsa_testing_ts)
sfit <- sarima.for(nfp_nsa_training_ts, n_pred , 0, 1, 0)
sfit
mse(sfit$pred, nfp_nsa_testing_ts)
?sarima
?sarima.for
sfit <- sarima.for(nfp_nsa_training_ts, n_pred , p=0, d=1, q=0, P=0, D=1, Q=0)
sfit <- sarima.for(nfp_nsa_training_ts, n_pred , p=0, d=1, q=0, P=0, D=1, Q=0, S=-1)
sfit <- sarima.for(nfp_nsa_training_ts, n_pred, p=0, d=1, q=0, P=0, D=1, Q=0, S=12)
sfit <- sarima.for(nfp_nsa_training_ts, n_pred, p=0, d=1, q=0, P=0, D=1, Q=0, S=6)
sfit <- sarima.for(nfp_nsa_training_ts, n_pred, p=0, d=1, q=0, P=0, D=1, Q=0, S=12)
sfit <- sarima.for(nfp_nsa_training_ts, n_pred, p=0, d=1, q=0, P=0, D=1, Q=0, S=6)
sfit <- sarima.for(nfp_nsa_training_ts, n_pred, p=0, d=1, q=0, P=0, D=1, Q=0, S=3)
sfit <- sarima.for(nfp_nsa_training_ts, n_pred, p=0, d=1, q=0, P=0, D=1, Q=0, S=2)
sfit <- sarima.for(nfp_nsa_training_ts, n_pred, p=0, d=1, q=0, P=0, D=1, Q=0, S=1)
sfit <- sarima.for(nfp_nsa_training_ts, n_pred, p=0, d=1, q=0, P=0, D=1, Q=0, S=12)
sfit
mse(sfit$pred, nfp_nsa_testing_ts)
```{r}
sfit <- sarima.for(nfp_nsa_training_ts, n_pred, p=0, d=1, q=0, P=0, D=1, Q=0, S=12)
sfit
mse(sfit$pred, nfp_nsa_testing_ts)
knitr::opts_chunk$set(echo = TRUE)
library(DataComputing)
library(astsa)
#setwd("~/Dropbox/Berkeley/stat153/NFP-TSA/")
plot.new()
t_new <- (tail(t, 1) + 1):(tail(t, 1) + 24)
periodic_terms_new <- do.call(cbind, lapply(top_freq, function(freq) {
cbind(cos(2 * pi * freq * t_new), sin(2 * pi * freq * t_new))
}))
library(DataComputing)
library(astsa)
PAYNSA <- read.csv(file = "PAYNSA.csv", header = TRUE, sep = ",")
nfp_nsa_ts_2010_2018 <- ts(PAYNSA[853:951, ][2])
plot.ts(nfp_nsa_ts_2010_2018, main = "Non Seasonally Adjusted NFP Data")
differenced_NSA <- diff(nfp_nsa_ts_2010_2018)
plot.ts(differenced_NSA, main = "First DIfference of NSA Data")
mvspec(differenced_NSA, detrend = FALSE)
mvspec(nfp_nsa_ts_2010_2018)
mvspec(differenced_NSA, kernel("daniell", 1), log = "no")
mvspec(nfp_nsa_ts_2010_2018, kernel("daniell", 1), log = "no")
mvspec(differenced_NSA, kernel("daniell", 2), log = "no")
mvspec(nfp_nsa_ts_2010_2018, kernel("daniell", 2), log = "no")
mvspec(differenced_NSA, kernel("modified.daniell", 1), log = "no")
mvspec(nfp_nsa_ts_2010_2018, kernel("modified.daniell", 1), log = "no")
mvspec(nfp_nsa_ts_2010_2018, kernel("modified.daniell", 1), log = "no", taper = 0.2)
mvspec(differenced_NSA, kernel("modified.daniell", 1), log = "no", taper = 0.2)
pgram_detrend <- mvspec(nfp_nsa_ts_2010_2018, kernel("modified.daniell", 1), log = "no")
pgram_diffed <- mvspec(differenced_NSA, kernel("modified.daniell", 1), log = "no")
key_freq_ind <- c(1, which(diff(sign(diff(pgram_detrend$spec)))==-2) + 1)
key_freq <- pgram_detrend$freq[key_freq_ind]
abline(v=key_freq, lty=2)
plot.new()
key_freq_ind <- c(1, which(diff(sign(diff(pgram_detrend$spec)))==-2) + 1)
key_freq <- pgram_detrend$freq[key_freq_ind]
abline(v=key_freq, lty=2)
plot.new
key_freq_ind <- c(1, which(diff(sign(diff(pgram_detrend$spec)))==-2) + 1)
key_freq <- pgram_detrend$freq[key_freq_ind]
abline(v=key_freq, lty=2)
plot.new()
key_freq_ind <- c(1, which(diff(sign(diff(pgram_detrend$spec)))==-2) + 1)
key_freq <- pgram_detrend$freq[key_freq_ind]
abline(v=key_freq, lty=2)
key_freq_ind <- c(1, which(diff(sign(diff(pgram_diffed$spec)))==-2) + 1)
key_freq <- pgram_diffed$freq[key_freq_ind]
abline(v=key_freq, lty=2)
plot.new()
key_freq_ind <- c(1, which(diff(sign(diff(pgram_detrend$spec)))==-2) + 1)
key_freq <- pgram_detrend$freq[key_freq_ind]
abline(v=key_freq, lty=2)
plot.new()
key_freq_ind <- c(1, which(diff(sign(diff(pgram_detrend$spec)))==-2) + 1)
key_freq <- pgram_detrend$freq[key_freq_ind]
plot(pgram_detrend)
key_freq_ind <- c(1, which(diff(sign(diff(pgram_detrend$spec)))==-2) + 1)
key_freq <- pgram_detrend$freq[key_freq_ind]
abline(v=key_freq, lty=2)
plot.new(pgram_detrend)
key_freq_ind <- c(1, which(diff(sign(diff(pgram_detrend$spec)))==-2) + 1)
plot.new(pgram_detrend)
plot.new()
key_freq_ind <- c(1, which(diff(sign(diff(pgram_detrend$spec)))==-2) + 1)
key_freq <- pgram_detrend$freq[key_freq_ind]
abline(v=key_freq, lty=2)
knitr::opts_chunk$set(echo = TRUE)
library(DataComputing)
library(astsa)
#setwd("~/Dropbox/Berkeley/stat153/NFP-TSA/")
mse(forecast$pred, nfp_nsa_testing_ts)
mse(sfit$pred, nfp_nsa_testing_ts)
mse(forecast$pred, nfp_nsa_testing_ts)
mse(sfit$pred, nfp_nsa_testing_ts)
knitr::opts_chunk$set(echo = TRUE)
library(DataComputing)
library(astsa)
#setwd("~/Dropbox/Berkeley/stat153/NFP-TSA/")
PAYNSA <- read.csv(file = "PAYNSA.csv", header = TRUE, sep = ",")
nfp_nsa_ts <- ts(PAYNSA[2])
nfp_nsa_ts_2010_2018 <- ts(PAYNSA[853:951, ][2])
par(mfrow=c(1,2))
plot.ts(nfp_nsa_ts, main = "Nonfarm Payrolls 1939-2018", xlab = "Months (since January 1939)", ylab = "Number of Payrolls")
plot.ts(nfp_nsa_ts_2010_2018, main = "Nonfarm Payrolls 2010-2018", xlab = "Months (since January 2010)", ylab = "Number of Payrolls")
NSA_diff <- diff(nfp_nsa_ts_2010_2018, lag = 1, differences = 1)
par(mfrow=c(1,2))
plot.ts(NSA_diff, main = "NSA Differences, 2010-2018", xlab = "Months (since January 2010)", ylab = "Number of Payrolls")
hist(as.numeric(unlist(NSA_diff)), breaks=15,  main = "Histogram of NSA Differences", xlab = "Change in Payrolls")
NSA_mean <- mean(NSA_diff, na.rm = TRUE)
centered_NSA_diff <- NSA_diff - NSA_mean
plot.ts(centered_NSA_diff, main = "Centered NSA Diffs, 2010-2018", xlab = "Months (since January 2010)", ylab = "Number of Payrolls")
PAYNSA <- read.csv(file = "PAYNSA.csv", header = TRUE, sep = ",")
nfp_nsa_ts <- ts(PAYNSA[853:951,][2])
par(mfrow=c(1,2))
NSA_sdiff <- diff(nfp_nsa_ts, lag = 12, differences = 1)
NSA_smean <- mean(NSA_sdiff)
centered_NSA_sdiff <- NSA_sdiff - NSA_smean
plot.ts(centered_NSA_sdiff, main = "Centered NSA Seasonal Diffs", xlab = "Months (since January 2010)", ylab = "Number of Payrolls")
NSA_sdiff2 <- diff(NSA_sdiff, lag = 1, differences = 1)
plot.ts(NSA_sdiff2, main = "After Differencing Again")
par(mfrow=c(1,2))
acf(NSA_sdiff2, main = "ACF")
pacf(NSA_sdiff2, main = "PACF")
PAYNSA <- read.csv(file = "PAYNSA.csv", header = TRUE, sep = ",")
nfp_nsa_ts_2010_2018 <- ts(PAYNSA[853:951, ][2])
differenced_NSA <- diff(nfp_nsa_ts_2010_2018)
par(mfrow=c(1,2))
mvspec(differenced_NSA, detrend = FALSE)
mvspec(nfp_nsa_ts_2010_2018)
par(mfrow=c(1,2))
mvspec(differenced_NSA, kernel("daniell", 1), log = "no")
mvspec(nfp_nsa_ts_2010_2018, kernel("daniell", 1), log = "no")
par(mfrow=c(1,2))
mvspec(differenced_NSA, kernel("modified.daniell", 1), log = "no")
mvspec(nfp_nsa_ts_2010_2018, kernel("modified.daniell", 1), log = "no")
par(mfrow=c(1,2))
pgram_diffed <- mvspec(differenced_NSA, kernel("modified.daniell", 1), log = "no")
key_freq_ind <- c(1, which(diff(sign(diff(pgram_diffed$spec)))==-2) + 1)
key_freq <- pgram_diffed$freq[key_freq_ind]
abline(v=key_freq, lty=2)
pgram_detrend <- mvspec(nfp_nsa_ts_2010_2018, kernel("modified.daniell", 1), log = "no")
key_freq_ind <- c(1, which(diff(sign(diff(pgram_detrend$spec)))==-2) + 1)
key_freq <- pgram_detrend$freq[key_freq_ind]
abline(v=key_freq, lty=2)
par(mfrow=c(1,2))
mvspec(nfp_nsa_ts_2010_2018, kernel("modified.daniell", 1), log = "no")
pgram_ar <- spec.ar(differenced_NSA, plot=F)
lines(pgram_ar$freq, pgram_ar$spec, lty=2, col="red")
mvspec(differenced_NSA, kernel("modified.daniell", 1), log = "no")
pgram_ar <- spec.ar(differenced_NSA, plot=F)
lines(pgram_ar$freq, pgram_ar$spec, lty=2, col="red")
PAYNSA <- read.csv(file = "PAYNSA.csv", header = TRUE, sep = ",")
nfp_nsa_ts <- ts(PAYNSA[2])
nfp_nsa_training_ts <- ts(PAYNSA[853:939,][2])
nfp_nsa_testing_ts <- ts(PAYNSA[940:951,][2])
mse <- function(ts1, ts2) {
sum_squares = 0
for (i in 1:length(ts1)) {
diff <- ts1[i] - ts2[i]
sum_squares = sum_squares + diff^2
}
sum_squares/length(ts1)
}
nobs <- length(nfp_nsa_training_ts)
fit <- arima(nfp_nsa_training_ts, order=c(0, 1, 0), xreg=1:nobs)
n_pred <- length(nfp_nsa_testing_ts)
forecast <- predict(fit, n_pred, newxreg=(nobs+1):(nobs+n_pred))
par(mfrow=c(1, 2))
ts.plot(nfp_nsa_training_ts, forecast$pred, col=c("black", "red"))
sfit <- sarima.for(nfp_nsa_training_ts, n_pred, p=0, d=1, q=0, P=0, D=1, Q=0, S=12)
